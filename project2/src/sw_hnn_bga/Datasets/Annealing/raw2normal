#!/tools/bin/perl
#
# Problem: Annealing
# Encodes raw data file into a training file for normal networks
#
# usage: raw2cod inputfile >outputfile

while (<>) {
  @F = split (',');

  $v = $F[0];  #family
  printf ("%s ", 
	  $v eq "GB"  ? "1 0 0 0 0 0 0 0 0 0" :
	  $v eq "GK"  ? "0 1 0 0 0 0 0 0 0 0" :
	  $v eq "GS"  ? "0 0 1 0 0 0 0 0 0 0" :
	  $v eq "TN"  ? "0 0 0 1 0 0 0 0 0 0" :
	  $v eq "ZA"  ? "0 0 0 0 1 0 0 0 0 0" :
	  $v eq "ZF"  ? "0 0 0 0 0 1 0 0 0 0" :
	  $v eq "ZH"  ? "0 0 0 0 0 0 1 0 0 0" :
	  $v eq "ZM"  ? "0 0 0 0 0 0 0 1 0 0" :
	  $v eq "ZS"  ? "0 0 0 0 0 0 0 0 1 0" :
	  $v eq "-"   ? "0 0 0 0 0 0 0 0 0 1" :
	  "##########");

  $v = $F[1];  #product-type
 # printf ("%s ", 
 #	  $v eq "C" ? "1 0 0" :
 #	  $v eq "H" ? "0 1 0" :
 #	  $v eq "G" ? "0 0 1" :
 #	  "##########");
 
  $v = $F[2];  #steel
  printf ("%s ", 
	  $v eq "R"  ? "1 0 0 0 0 0 0 0 0" :
	  $v eq "A"  ? "0 1 0 0 0 0 0 0 0" :
	  $v eq "U"  ? "0 0 1 0 0 0 0 0 0" :
	  $v eq "K"  ? "0 0 0 1 0 0 0 0 0" :
	  $v eq "M"  ? "0 0 0 0 1 0 0 0 0" :
	  $v eq "S"  ? "0 0 0 0 0 1 0 0 0" :
	  $v eq "W"  ? "0 0 0 0 0 0 1 0 0" :
	  $v eq "V"  ? "0 0 0 0 0 0 0 1 0" :
	  $v eq "-"  ? "0 0 0 0 0 0 0 0 1" :
	  "##########");

  $v = $F[3];  #carbon
  if ($v eq "-") { printf ("##########"); }
  else { printf ("%7.3f ", $v); }
 
  $v = $F[4];  #hardness
  if ($v eq "-") { printf ("##########"); }
  else { printf ("%7.3f ", $v); }

  $v = $F[5];  #temper_rolling
  printf ("%s ", 
	  $v eq "T" ? "1 0" :
	  $v eq "-" ? "0 1" :
	  "##########");

  $v = $F[6];  #condition
  printf ("%s ", 
	  $v eq "S" ? "1 0 0 0":
	  $v eq "A" ? "0 1 0 0":
	  $v eq "X" ? "0 0 1 0":
	  $v eq "-" ? "0 0 0 1":
	  "##########");

  $v = $F[7];  #formability
  printf ("%s ", 
	  $v eq "1" ? "1 0 0 0 0 0":
	  $v eq "2" ? "0 1 0 0 0 0":
	  $v eq "3" ? "0 0 1 0 0 0":
	  $v eq "4" ? "0 0 0 1 0 0":
	  $v eq "5" ? "0 0 0 0 1 0":
	  $v eq "-" ? "0 0 0 0 0 1":
	  "##########");
 
  $v = $F[8];  #strength
  if ($v eq "-") { printf ("##########"); }
  else { printf ("%7.3f ", $v); }

  $v = $F[9];  #non-ageing
  printf ("%s ", 
	  $v eq "N" ? "1 0" :
	  $v eq "-" ? "0 1" :
	  "##########");

  $v = $F[10];  #surface-finish
  printf ("%s ", 
	  $v eq "P" ? "1 0 0" :
	  $v eq "M" ? "0 1 0" :
	  $v eq "-" ? "0 0 1" :
	  "##########");

  $v = $F[11];  #surface-quality
  printf ("%s ", 
	  $v eq "D" ? "1 0 0 0 0":
	  $v eq "E" ? "0 1 0 0 0":
	  $v eq "F" ? "0 0 1 0 0":
	  $v eq "G" ? "0 0 0 1 0":
	  $v eq "-" ? "0 0 0 0 1":
	  "##########");

  $v = $F[12];  #enamelability
  printf ("%s ", 
	  $v eq "1" ? "1 0 0 0 0 0":
	  $v eq "2" ? "0 1 0 0 0 0":
	  $v eq "3" ? "0 0 1 0 0 0":
	  $v eq "4" ? "0 0 0 1 0 0":
	  $v eq "5" ? "0 0 0 0 1 0":
	  $v eq "-" ? "0 0 0 0 0 1":
	  "##########");

  $v = $F[13];  #bc
  printf ("%s ", 
	  $v eq "Y" ? "1 0" :
	  $v eq "-" ? "0 1" :
	  "##########");

  $v = $F[14];  #bf
  printf ("%s ", 
	  $v eq "Y" ? "1 0" :
	  $v eq "-" ? "0 1" :
	  "##########");

  $v = $F[15];  #bt
  printf ("%s ", 
	  $v eq "Y" ? "1 0" :
	  $v eq "-" ? "0 1" :
	  "##########");

  $v = $F[16];  #bw/me
  printf ("%s ", 
	  $v eq "B" ? "1 0 0" :
	  $v eq "M" ? "0 1 0" :
	  $v eq "-" ? "0 0 1" :
	  "##########");

  $v = $F[17];  #bl
  printf ("%s ", 
	  $v eq "Y" ? "1 0" :
	  $v eq "-" ? "0 1" :
	  "##########");

  $v = $F[18];  #m
#  printf ("%s ", 
#	  $v eq "Y" ? "1 0" :
#	  $v eq "-" ? "0 1" :
#	  "##########");

 $v = $F[19];  #chrom
  printf ("%s ", 
	  $v eq "C" ? "1 0" :
	  $v eq "-" ? "0 1" :
	  "##########");

 $v = $F[20];  #phos
  printf ("%s ", 
	  $v eq "P" ? "1 0" :
	  $v eq "-" ? "0 1" :
	  "##########");

 $v = $F[21];  #cbond
#  printf ("%s ", 
#	  $v eq "Y" ? "1 0" :
#	  $v eq "-" ? "0 1" :
#	  "##########");
#
 $v = $F[22];  #marvi
#  printf ("%s ", 
#	  $v eq "Y" ? "1 0" :
#	  $v eq "-" ? "0 1" :
#	  "##########");

 $v = $F[23];  #exptl
  printf ("%s ", 
	  $v eq "Y" ? "1 0" :
	  $v eq "-" ? "0 1" :
	  "##########");

 $v = $F[24];  #ferro
#  printf ("%s ", 
#	  $v eq "Y" ? "1 0" :
#	  $v eq "-" ? "0 1" :
#	  "##########");
#
 $v = $F[25];  #corr
#  printf ("%s ", 
#	  $v eq "Y"  ? "1 0" :
#	  $v eq "-"  ? "0 1" :
#	  "##########");

  $v = $F[26];  #blue/bright/varn/clean
  printf ("%s ", 
	  $v eq "B"  ? "1 0 0 0 0":
	  $v eq "R"  ? "0 1 0 0 0":
	  $v eq "V"  ? "0 0 1 0 0":
	  $v eq "C"  ? "0 0 0 1 0":
	  $v eq "-"  ? "0 0 0 0 1":
	  "##########");

  $v = $F[27];  #lustre
#  printf ("%s ", 
#	  $v eq "Y"  ? "1 0" :
#	  $v eq "-"  ? "0 1" :
#	  "##########");
#
 $v = $F[28];  #jurofm
#  printf ("%s ", 
#	  $v eq "Y"  ? "1 0" :
#	  $v eq "-"  ? "0 1" :
#	  "##########");
#
 $v = $F[29];  #s
#  printf ("%s ", 
#	  $v eq "Y"  ? "1 0" :
#	  $v eq "-"  ? "0 1" :
#	  "##########");
#
 $v = $F[30];  #p
#  printf ("%s ", 
#	  $v eq "Y"  ? "1 0" :
#	  $v eq "-"  ? "0 1" :
#	  "##########");

  $v = $F[31];  #shape
  printf ("%s ", 
	  $v eq "COIL"  ? "1 0" :
	  $v eq "SHEET"  ? "0 1" :
	  "##########");

  $v = $F[32];  #thick
  if ($v eq "-") {printf ("##########");}
  else { printf ("%7.3f ", $v); }

  $v = $F[33];  #width
  if ($v eq "-") {printf ("##########");}
  else { printf ("%7.3f ", $v); }

  $v = $F[34];  #len
  if ($v eq "-") {printf ("##########");}
  else { printf ("%7.3f ", $v); }

  $v = $F[35];  #oil
  printf ("%s ", 
	  $v eq "Y"  ? "1 0 0" :
	  $v eq "N"  ? "0 1 0" :
	  $v eq "-"  ? "0 0 1" :
	  "##########");

  $v = $F[36];  #bore
  printf ("%s ", 
	  $v eq "0000"  ? "1 0 0 0" :
	  $v eq "0500"  ? "0 1 0 0" :
	  $v eq "0600"  ? "0 0 1 0" :
	  $v eq "0760"  ? "0 0 0 1" :
	  "##########");

  $v = $F[37];  #packing
  printf ("%s ", 
	  $v eq "1"  ? "1 0 0 0" :
	  $v eq "2"  ? "0 1 0 0" :
	  $v eq "3"  ? "0 0 1 0" :
	  $v eq "-"  ? "0 0 0 1" :
	  "##########");

  $v = $F[38];  #OUTPUT
  printf ("%s\n", 
	  $v eq "1\n"  ? "1 0 0 0 0 0":
	  $v eq "2\n"  ? "0 1 0 0 0 0":
	  $v eq "3\n"  ? "0 0 1 0 0 0":
	  $v eq "4\n"  ? "0 0 0 1 0 0":
	  $v eq "5\n"  ? "0 0 0 0 1 0":
	  $v eq "U\n"  ? "0 0 0 0 0 1": 
	  "##########");

}
